// ===== TEXT MANAGER =====
class TextManager {
    constructor() {
        this.initialized = false;
    }

    // Initialize text content throughout the application
    initialize() {
        // Check if CONSTANTS is available
        if (typeof window.CONSTANTS === 'undefined') {
            console.error('‚ùå CONSTANTS not available, cannot initialize TextManager');
            return;
        }
        
        this.updatePageTitle();
        this.updateNavigationText();
        this.updateSectionHeaders();
        this.updateButtonLabels();
        this.updateFormLabels();
        this.updateFormHelp();
        this.updateModalTitles();
        this.updateDropdownOptions();
        this.updateFooterText();
        this.updateAlertMessages();
        this.updateAvatarOptions();
        
        if (!this.initialized) {
            this.initialized = true;
        }
    }

    // Update page title
    updatePageTitle() {
        document.title = CONSTANTS.PAGE_TITLE;
        
        // Update app title spans
        this.updateElementText('#app-title-hall', CONSTANTS.APP_TITLE.HALL);
        this.updateElementText('#app-title-of', CONSTANTS.APP_TITLE.OF);
        this.updateElementText('#app-title-fame', CONSTANTS.APP_TITLE.FAME);
    }

    // Update navigation text
    updateNavigationText() {
        // Update navigation text spans
        this.updateElementText('#nav-players-text', CONSTANTS.NAVIGATION.PLAYERS);
        this.updateElementText('#nav-games-text', CONSTANTS.NAVIGATION.GAMES);
        this.updateElementText('#nav-matches-text', CONSTANTS.NAVIGATION.MATCHES);
    }

    // Update section headers
    updateSectionHeaders() {
        // Update ranking section
        this.updateElementText('#ranking-header', CONSTANTS.SECTIONS.RANKING);

        // Update section headers
        this.updateElementText('#section-players-header', CONSTANTS.SECTIONS.PLAYERS);
        this.updateElementText('#section-games-header', CONSTANTS.SECTIONS.GAMES);
        this.updateElementText('#section-matches-header', CONSTANTS.SECTIONS.MATCHES);
    }

    // Update button labels
    updateButtonLabels() {
        // Update add player button
        this.updateElementText('#add-player-btn-text', CONSTANTS.BUTTONS.ADD_PLAYER);

        // Update add game button
        this.updateElementText('#add-game-btn-text', CONSTANTS.BUTTONS.ADD_GAME);

        // Update record match button
        this.updateElementText('#add-match-btn-text', CONSTANTS.BUTTONS.RECORD_MATCH);

        // Update add participant button
        this.updateElementText('#add-participant-btn-text', CONSTANTS.BUTTONS.ADD_PARTICIPANT);

        // Update modal buttons
        this.updateModalButtons();
    }

    // Update modal buttons
    updateModalButtons() {
        // Player modal buttons
        const playerCancelBtn = document.querySelector('#addPlayerModal .btn-secondary');
        const playerSubmitBtn = document.querySelector('#player-submit-btn');
        if (playerCancelBtn) playerCancelBtn.textContent = CONSTANTS.BUTTONS.CANCEL;
        if (playerSubmitBtn) playerSubmitBtn.textContent = CONSTANTS.BUTTONS.ADD;

        // Game modal buttons
        const gameCancelBtn = document.querySelector('#addGameModal .btn-secondary');
        const gameSubmitBtn = document.querySelector('#game-submit-btn');
        if (gameCancelBtn) gameCancelBtn.textContent = CONSTANTS.BUTTONS.CANCEL;
        if (gameSubmitBtn) gameSubmitBtn.textContent = CONSTANTS.BUTTONS.ADD;

        // Match modal buttons
        const matchCancelBtn = document.querySelector('#addMatchModal .btn-secondary');
        const matchSubmitBtn = document.querySelector('#match-submit-btn');
        if (matchCancelBtn) matchCancelBtn.textContent = CONSTANTS.BUTTONS.CANCEL;
        if (matchSubmitBtn) matchSubmitBtn.textContent = CONSTANTS.BUTTONS.RECORD_MATCH;

        // Import modal buttons
        const importCancelBtn = document.querySelector('#importModal .btn-secondary');
        const importSubmitBtn = document.querySelector('#importModal .btn-primary');
        if (importCancelBtn) importCancelBtn.textContent = CONSTANTS.BUTTONS.CANCEL;
        if (importSubmitBtn) {
            importSubmitBtn.innerHTML = `<i class="bi bi-upload me-1"></i>${CONSTANTS.BUTTONS.IMPORT}`;
        }

        // Game ranking modal buttons
        const gameRankingCloseBtn = document.querySelector('#gameRankingModal .btn-secondary');
        if (gameRankingCloseBtn) gameRankingCloseBtn.textContent = CONSTANTS.BUTTONS.CLOSE;
    }

    // Update form labels
    updateFormLabels() {
        // Player form labels
        this.updateElementText('#player-name-label', CONSTANTS.FORM_LABELS.NAME);
        this.updateElementText('#player-avatar-label', CONSTANTS.FORM_LABELS.AVATAR);

        // Game form labels
        this.updateElementText('#game-name-label', CONSTANTS.FORM_LABELS.GAME_NAME);
        this.updateElementText('#game-type-label', CONSTANTS.FORM_LABELS.TYPE);

        // Match form labels
        this.updateElementText('#match-game-label', CONSTANTS.FORM_LABELS.GAME);
        this.updateElementText('#match-date-label', CONSTANTS.FORM_LABELS.DATE);
        this.updateElementText('#participants-label', CONSTANTS.FORM_LABELS.PARTICIPANTS_AND_RESULTS);

        // Import form labels
        this.updateElementText('#backup-file-label', CONSTANTS.FORM_LABELS.BACKUP_FILE);
    }

    // Update form help text and placeholders
    updateFormHelp() {
        // Avatar filter placeholder and help
        const avatarFilter = document.querySelector('#avatar-filter');
        if (avatarFilter) avatarFilter.placeholder = CONSTANTS.FORM_HELP.AVATAR_FILTER;
        this.updateElementText('#avatar-filter-help', CONSTANTS.FORM_HELP.AVATAR_FILTER_HELP);

        // Game selector placeholder
        this.updateElementText('#match-game-placeholder', CONSTANTS.FORM_HELP.SELECT_GAME_PLACEHOLDER);

        // Backup file help
        this.updateElementText('#backup-file-help', CONSTANTS.FORM_HELP.BACKUP_FILE_HELP);
    }

    // Update modal titles
    updateModalTitles() {
        // Player modal title
        this.updateElementText('#player-modal-title', CONSTANTS.MODAL_TITLES.ADD_PLAYER);

        // Game modal title
        this.updateElementText('#game-modal-title', CONSTANTS.MODAL_TITLES.ADD_GAME);

        // Match modal title
        this.updateElementText('#match-modal-title', CONSTANTS.MODAL_TITLES.RECORD_MATCH);

        // Import modal title
        this.updateElementText('#import-modal-title', CONSTANTS.MODAL_TITLES.IMPORT_BACKUP);

        // Game ranking modal title
        this.updateElementText('#game-ranking-modal-title', CONSTANTS.MODAL_TITLES.GAME_RANKING);
    }

    // Update dropdown options
    updateDropdownOptions() {
        // Ranking sort options
        this.updateElementText('#ranking-sort-points', CONSTANTS.DROPDOWN_OPTIONS.RANKING_SORT.POINTS);
        this.updateElementText('#ranking-sort-performance', CONSTANTS.DROPDOWN_OPTIONS.RANKING_SORT.PERFORMANCE);

        // Game ranking sort options
        this.updateElementText('#game-ranking-sort-points', CONSTANTS.DROPDOWN_OPTIONS.RANKING_SORT.POINTS);
        this.updateElementText('#game-ranking-sort-performance', CONSTANTS.DROPDOWN_OPTIONS.RANKING_SORT.PERFORMANCE);

        // Game type options
        this.updateElementText('#game-type-board', CONSTANTS.DROPDOWN_OPTIONS.GAME_TYPES.BOARD);
        this.updateElementText('#game-type-card', CONSTANTS.DROPDOWN_OPTIONS.GAME_TYPES.CARD);
        this.updateElementText('#game-type-garden', CONSTANTS.DROPDOWN_OPTIONS.GAME_TYPES.GARDEN);
        this.updateElementText('#game-type-sport', CONSTANTS.DROPDOWN_OPTIONS.GAME_TYPES.SPORT);
        this.updateElementText('#game-type-other', CONSTANTS.DROPDOWN_OPTIONS.GAME_TYPES.OTHER);
    }

    // Update footer text
    updateFooterText() {
        // Settings dropdown headers
        this.updateElementText('#settings-backup-header', CONSTANTS.FOOTER.BACKUP);
        this.updateElementText('#settings-language-header', CONSTANTS.FOOTER.LANGUAGE);

        // Backup dropdown items
        this.updateElementText('#export-backup-text', CONSTANTS.FOOTER.EXPORT_BACKUP);
        this.updateElementText('#import-backup-text', CONSTANTS.FOOTER.IMPORT_BACKUP);

        // Language dropdown items
        this.updateElementText('#language-italian-text', CONSTANTS.FOOTER.ITALIAN);
        this.updateElementText('#language-english-text', CONSTANTS.FOOTER.ENGLISH);

        // GitHub link title
        const githubLink = document.querySelector('#github-link');
        if (githubLink) {
            githubLink.title = CONSTANTS.FOOTER.GITHUB_TITLE;
        }
    }

    // Update alert messages
    updateAlertMessages() {
        // Import warning alert
        this.updateElementText('#import-warning-title', CONSTANTS.ALERTS.IMPORT_WARNING_TITLE);
        this.updateElementText('#import-warning-message', CONSTANTS.ALERTS.IMPORT_WARNING_MESSAGE);
    }

    // Update avatar options (this would be a large update, so we'll create a separate method)
    updateAvatarOptions() {
        const avatarSelect = document.getElementById('player-avatar');
        if (!avatarSelect) {
            console.warn('‚ö†Ô∏è Avatar select element not found');
            return;
        }

        // Store current selection
        const currentValue = avatarSelect.value;
        
        // Clear existing options
        avatarSelect.innerHTML = '';
        
        // Get avatar categories from constants
        const categories = CONSTANTS.AVATAR_CATEGORIES;
        if (!categories) {
            console.error('‚ùå Avatar categories not found in constants');
            return;
        }

        // Add Faces & Emotions section
        if (categories.FACES_EMOTIONS) {
            const emotions = categories.FACES_EMOTIONS;
            this.addAvatarOption(avatarSelect, 'üòä', emotions.SORRIDENTE);
            this.addAvatarOption(avatarSelect, 'üòé', emotions.COOL);
            this.addAvatarOption(avatarSelect, 'ü§©', emotions.STELLARE);
            this.addAvatarOption(avatarSelect, 'ü•≥', emotions.FESTA);
            this.addAvatarOption(avatarSelect, 'ü§Ø', emotions.WOW);
            this.addAvatarOption(avatarSelect, 'üòç', emotions.INNAMORATO);
            this.addAvatarOption(avatarSelect, 'ü§î', emotions.PENSIEROSO);
            this.addAvatarOption(avatarSelect, 'üòÑ', emotions.FELICE);
            this.addAvatarOption(avatarSelect, 'üòÇ', emotions.LACRIME);
            this.addAvatarOption(avatarSelect, 'ü•∞', emotions.AMOROSO);
            this.addAvatarOption(avatarSelect, 'üòá', emotions.ANGELO);
            this.addAvatarOption(avatarSelect, 'ü§ó', emotions.ABBRACCIO);
            this.addAvatarOption(avatarSelect, 'ü§≠', emotions.TIMIDO);
            this.addAvatarOption(avatarSelect, 'ü§´', emotions.SILENZIO);
            this.addAvatarOption(avatarSelect, 'ü§®', emotions.SOSPETTOSO);
            this.addAvatarOption(avatarSelect, 'üòè', emotions.FURBO);
            this.addAvatarOption(avatarSelect, 'üò¥', emotions.DORMIENTE);
            this.addAvatarOption(avatarSelect, 'ü§ì', emotions.NERD);
            this.addAvatarOption(avatarSelect, 'ü•∂', emotions.FREDDO);
            this.addAvatarOption(avatarSelect, 'ü•µ', emotions.CALDO);
            this.addAvatarOption(avatarSelect, 'üò∂‚Äçüå´Ô∏è', emotions.MISTERIOSO);
            this.addAvatarOption(avatarSelect, 'ü§™', emotions.PAZZO);
            this.addAvatarOption(avatarSelect, 'üòµ‚Äçüí´', emotions.STORDITO);
            this.addAvatarOption(avatarSelect, 'ü§ë', emotions.SOLDI);
            this.addAvatarOption(avatarSelect, 'ü§†', emotions.COWBOY);
        }

        // Add People section
        if (categories.PEOPLE) {
            const people = categories.PEOPLE;
            
            // Babies
            this.addAvatarOption(avatarSelect, 'üë∂', people.BIMBO);
            this.addAvatarOption(avatarSelect, 'üë∂üèª', people.BIMBO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë∂üèº', people.BIMBO_MEDIO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë∂üèΩ', people.BIMBO_MEDIO);
            this.addAvatarOption(avatarSelect, 'üë∂üèæ', people.BIMBO_MEDIO_SCURO);
            this.addAvatarOption(avatarSelect, 'üë∂üèø', people.BIMBO_SCURO);
            
            this.addAvatarOption(avatarSelect, 'üëß', people.BIMBA);
            this.addAvatarOption(avatarSelect, 'üëßüèª', people.BIMBA_CHIARA);
            this.addAvatarOption(avatarSelect, 'üëßüèº', people.BIMBA_MEDIO_CHIARA);
            this.addAvatarOption(avatarSelect, 'üëßüèΩ', people.BIMBA_MEDIA);
            this.addAvatarOption(avatarSelect, 'üëßüèæ', people.BIMBA_MEDIO_SCURA);
            this.addAvatarOption(avatarSelect, 'üëßüèø', people.BIMBA_SCURA);
            
            this.addAvatarOption(avatarSelect, 'üë¶', people.BAMBINO);
            this.addAvatarOption(avatarSelect, 'üë¶üèª', people.BAMBINO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë¶üèº', people.BAMBINO_MEDIO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë¶üèΩ', people.BAMBINO_MEDIO);
            this.addAvatarOption(avatarSelect, 'üë¶üèæ', people.BAMBINO_MEDIO_SCURO);
            this.addAvatarOption(avatarSelect, 'üë¶üèø', people.BAMBINO_SCURO);
            
            // Women
            this.addAvatarOption(avatarSelect, 'üë©', people.DONNA);
            this.addAvatarOption(avatarSelect, 'üë©üèª', people.DONNA_CHIARA);
            this.addAvatarOption(avatarSelect, 'üë©üèº', people.DONNA_MEDIO_CHIARA);
            this.addAvatarOption(avatarSelect, 'üë©üèΩ', people.DONNA_MEDIA);
            this.addAvatarOption(avatarSelect, 'üë©üèæ', people.DONNA_MEDIO_SCURA);
            this.addAvatarOption(avatarSelect, 'üë©üèø', people.DONNA_SCURA);
            
            this.addAvatarOption(avatarSelect, 'üë±‚Äç‚ôÄÔ∏è', people.DONNA_BIONDA);
            this.addAvatarOption(avatarSelect, 'üë±üèª‚Äç‚ôÄÔ∏è', people.DONNA_BIONDA_CHIARA);
            this.addAvatarOption(avatarSelect, 'üë±üèº‚Äç‚ôÄÔ∏è', people.DONNA_BIONDA_MEDIO_CHIARA);
            this.addAvatarOption(avatarSelect, 'üë±üèΩ‚Äç‚ôÄÔ∏è', people.DONNA_BIONDA_MEDIA);
            this.addAvatarOption(avatarSelect, 'üë±üèæ‚Äç‚ôÄÔ∏è', people.DONNA_BIONDA_MEDIO_SCURA);
            this.addAvatarOption(avatarSelect, 'üë±üèø‚Äç‚ôÄÔ∏è', people.DONNA_BIONDA_SCURA);
            
            this.addAvatarOption(avatarSelect, 'üë©‚Äçü¶±', people.DONNA_RICCIA);
            this.addAvatarOption(avatarSelect, 'üë©üèª‚Äçü¶±', people.DONNA_RICCIA_CHIARA);
            this.addAvatarOption(avatarSelect, 'üë©üèº‚Äçü¶±', people.DONNA_RICCIA_MEDIO_CHIARA);
            this.addAvatarOption(avatarSelect, 'üë©üèΩ‚Äçü¶±', people.DONNA_RICCIA_MEDIA);
            this.addAvatarOption(avatarSelect, 'üë©üèæ‚Äçü¶±', people.DONNA_RICCIA_MEDIO_SCURA);
            this.addAvatarOption(avatarSelect, 'üë©üèø‚Äçü¶±', people.DONNA_RICCIA_SCURA);
            
            this.addAvatarOption(avatarSelect, 'üë©‚Äçü¶∞', people.DONNA_ROSSA);
            this.addAvatarOption(avatarSelect, 'üë©üèª‚Äçü¶∞', people.DONNA_ROSSA_CHIARA);
            this.addAvatarOption(avatarSelect, 'üë©üèº‚Äçü¶∞', people.DONNA_ROSSA_MEDIO_CHIARA);
            this.addAvatarOption(avatarSelect, 'üë©üèΩ‚Äçü¶∞', people.DONNA_ROSSA_MEDIA);
            this.addAvatarOption(avatarSelect, 'üë©üèæ‚Äçü¶∞', people.DONNA_ROSSA_MEDIO_SCURA);
            this.addAvatarOption(avatarSelect, 'üë©üèø‚Äçü¶∞', people.DONNA_ROSSA_SCURA);
            
            this.addAvatarOption(avatarSelect, 'üë©‚Äçü¶≥', people.DONNA_BIANCA);
            this.addAvatarOption(avatarSelect, 'üë©üèª‚Äçü¶≥', people.DONNA_BIANCA_CHIARA);
            this.addAvatarOption(avatarSelect, 'üë©üèº‚Äçü¶≥', people.DONNA_BIANCA_MEDIO_CHIARA);
            this.addAvatarOption(avatarSelect, 'üë©üèΩ‚Äçü¶≥', people.DONNA_BIANCA_MEDIA);
            this.addAvatarOption(avatarSelect, 'üë©üèæ‚Äçü¶≥', people.DONNA_BIANCA_MEDIO_SCURA);
            this.addAvatarOption(avatarSelect, 'üë©üèø‚Äçü¶≥', people.DONNA_BIANCA_SCURA);
            
            this.addAvatarOption(avatarSelect, 'üë©‚Äçü¶≤', people.DONNA_CALVA);
            this.addAvatarOption(avatarSelect, 'üë©üèª‚Äçü¶≤', people.DONNA_CALVA_CHIARA);
            this.addAvatarOption(avatarSelect, 'üë©üèº‚Äçü¶≤', people.DONNA_CALVA_MEDIO_CHIARA);
            this.addAvatarOption(avatarSelect, 'üë©üèΩ‚Äçü¶≤', people.DONNA_CALVA_MEDIA);
            this.addAvatarOption(avatarSelect, 'üë©üèæ‚Äçü¶≤', people.DONNA_CALVA_MEDIO_SCURA);
            this.addAvatarOption(avatarSelect, 'üë©üèø‚Äçü¶≤', people.DONNA_CALVA_SCURA);
            
            // Men
            this.addAvatarOption(avatarSelect, 'üë®', people.UOMO);
            this.addAvatarOption(avatarSelect, 'üë®üèª', people.UOMO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë®üèº', people.UOMO_MEDIO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë®üèΩ', people.UOMO_MEDIO);
            this.addAvatarOption(avatarSelect, 'üë®üèæ', people.UOMO_MEDIO_SCURO);
            this.addAvatarOption(avatarSelect, 'üë®üèø', people.UOMO_SCURO);
            
            this.addAvatarOption(avatarSelect, 'üë±‚Äç‚ôÇÔ∏è', people.UOMO_BIONDO);
            this.addAvatarOption(avatarSelect, 'üë±üèª‚Äç‚ôÇÔ∏è', people.UOMO_BIONDO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë±üèº‚Äç‚ôÇÔ∏è', people.UOMO_BIONDO_MEDIO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë±üèΩ‚Äç‚ôÇÔ∏è', people.UOMO_BIONDO_MEDIO);
            this.addAvatarOption(avatarSelect, 'üë±üèæ‚Äç‚ôÇÔ∏è', people.UOMO_BIONDO_MEDIO_SCURO);
            this.addAvatarOption(avatarSelect, 'üë±üèø‚Äç‚ôÇÔ∏è', people.UOMO_BIONDO_SCURO);
            
            this.addAvatarOption(avatarSelect, 'üë®‚Äçü¶±', people.UOMO_RICCIO);
            this.addAvatarOption(avatarSelect, 'üë®üèª‚Äçü¶±', people.UOMO_RICCIO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë®üèº‚Äçü¶±', people.UOMO_RICCIO_MEDIO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë®üèΩ‚Äçü¶±', people.UOMO_RICCIO_MEDIO);
            this.addAvatarOption(avatarSelect, 'üë®üèæ‚Äçü¶±', people.UOMO_RICCIO_MEDIO_SCURO);
            this.addAvatarOption(avatarSelect, 'üë®üèø‚Äçü¶±', people.UOMO_RICCIO_SCURO);
            
            this.addAvatarOption(avatarSelect, 'üë®‚Äçü¶∞', people.UOMO_ROSSO);
            this.addAvatarOption(avatarSelect, 'üë®üèª‚Äçü¶∞', people.UOMO_ROSSO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë®üèº‚Äçü¶∞', people.UOMO_ROSSO_MEDIO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë®üèΩ‚Äçü¶∞', people.UOMO_ROSSO_MEDIO);
            this.addAvatarOption(avatarSelect, 'üë®üèæ‚Äçü¶∞', people.UOMO_ROSSO_MEDIO_SCURO);
            this.addAvatarOption(avatarSelect, 'üë®üèø‚Äçü¶∞', people.UOMO_ROSSO_SCURO);
            
            this.addAvatarOption(avatarSelect, 'üë®‚Äçü¶≥', people.UOMO_BIANCO);
            this.addAvatarOption(avatarSelect, 'üë®üèª‚Äçü¶≥', people.UOMO_BIANCO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë®üèº‚Äçü¶≥', people.UOMO_BIANCO_MEDIO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë®üèΩ‚Äçü¶≥', people.UOMO_BIANCO_MEDIO);
            this.addAvatarOption(avatarSelect, 'üë®üèæ‚Äçü¶≥', people.UOMO_BIANCO_MEDIO_SCURO);
            this.addAvatarOption(avatarSelect, 'üë®üèø‚Äçü¶≥', people.UOMO_BIANCO_SCURO);
            
            this.addAvatarOption(avatarSelect, 'üë®‚Äçü¶≤', people.UOMO_CALVO);
            this.addAvatarOption(avatarSelect, 'üë®üèª‚Äçü¶≤', people.UOMO_CALVO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë®üèº‚Äçü¶≤', people.UOMO_CALVO_MEDIO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë®üèΩ‚Äçü¶≤', people.UOMO_CALVO_MEDIO);
            this.addAvatarOption(avatarSelect, 'üë®üèæ‚Äçü¶≤', people.UOMO_CALVO_MEDIO_SCURO);
            this.addAvatarOption(avatarSelect, 'üë®üèø‚Äçü¶≤', people.UOMO_CALVO_SCURO);
            
            // Grandparents
            this.addAvatarOption(avatarSelect, 'üëµ', people.NONNA);
            this.addAvatarOption(avatarSelect, 'üëµüèª', people.NONNA_CHIARA);
            this.addAvatarOption(avatarSelect, 'üëµüèº', people.NONNA_MEDIO_CHIARA);
            this.addAvatarOption(avatarSelect, 'üëµüèΩ', people.NONNA_MEDIA);
            this.addAvatarOption(avatarSelect, 'üëµüèæ', people.NONNA_MEDIO_SCURA);
            this.addAvatarOption(avatarSelect, 'üëµüèø', people.NONNA_SCURA);
            
            this.addAvatarOption(avatarSelect, 'üë¥', people.NONNO);
            this.addAvatarOption(avatarSelect, 'üë¥üèª', people.NONNO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë¥üèº', people.NONNO_MEDIO_CHIARO);
            this.addAvatarOption(avatarSelect, 'üë¥üèΩ', people.NONNO_MEDIO);
            this.addAvatarOption(avatarSelect, 'üë¥üèæ', people.NONNO_MEDIO_SCURO);
            this.addAvatarOption(avatarSelect, 'üë¥üèø', people.NONNO_SCURO);
        }

        // Add Professions section
        if (categories.PROFESSIONS) {
            const professions = categories.PROFESSIONS;
            this.addAvatarOption(avatarSelect, 'üëÆ‚Äç‚ôÄÔ∏è', professions.POLIZIOTTA);
            this.addAvatarOption(avatarSelect, 'üëÆ‚Äç‚ôÇÔ∏è', professions.POLIZIOTTO);
            this.addAvatarOption(avatarSelect, 'üë∑‚Äç‚ôÄÔ∏è', professions.COSTRUTTRICE);
            this.addAvatarOption(avatarSelect, 'üë∑‚Äç‚ôÇÔ∏è', professions.COSTRUTTORE);
            this.addAvatarOption(avatarSelect, 'üíÇ‚Äç‚ôÄÔ∏è', professions.GUARDIA);
            this.addAvatarOption(avatarSelect, 'üíÇ‚Äç‚ôÇÔ∏è', professions.GUARDIA);
            this.addAvatarOption(avatarSelect, 'üïµÔ∏è‚Äç‚ôÄÔ∏è', professions.DETECTIVE);
            this.addAvatarOption(avatarSelect, 'üïµÔ∏è‚Äç‚ôÇÔ∏è', professions.DETECTIVE);
            this.addAvatarOption(avatarSelect, 'üë©‚Äç‚öïÔ∏è', professions.DOTTORESSA);
            this.addAvatarOption(avatarSelect, 'üë®‚Äç‚öïÔ∏è', professions.DOTTORE);
            this.addAvatarOption(avatarSelect, 'üë©‚Äçüåæ', professions.CONTADINA);
            this.addAvatarOption(avatarSelect, 'üë®‚Äçüåæ', professions.CONTADINO);
            this.addAvatarOption(avatarSelect, 'üë©‚Äçüç≥', professions.CHEF);
            this.addAvatarOption(avatarSelect, 'üë®‚Äçüç≥', professions.CHEF);
            this.addAvatarOption(avatarSelect, 'üë©‚Äçüéì', professions.STUDENTESSA);
            this.addAvatarOption(avatarSelect, 'üë®‚Äçüéì', professions.STUDENTE);
            this.addAvatarOption(avatarSelect, 'üë©‚Äçüé§', professions.CANTANTE);
            this.addAvatarOption(avatarSelect, 'üë®‚Äçüé§', professions.CANTANTE);
            this.addAvatarOption(avatarSelect, 'üë©‚Äçüè´', professions.INSEGNANTE);
            this.addAvatarOption(avatarSelect, 'üë®‚Äçüè´', professions.INSEGNANTE);
            this.addAvatarOption(avatarSelect, 'üë©‚Äçüíª', professions.PROGRAMMATRICE);
            this.addAvatarOption(avatarSelect, 'üë®‚Äçüíª', professions.PROGRAMMATORE);
            this.addAvatarOption(avatarSelect, 'üë©‚ÄçüöÄ', professions.ASTRONAUTA);
            this.addAvatarOption(avatarSelect, 'üë®‚ÄçüöÄ', professions.ASTRONAUTA);
            this.addAvatarOption(avatarSelect, 'üë©‚Äçüöí', professions.POMPIERE);
            this.addAvatarOption(avatarSelect, 'üë®‚Äçüöí', professions.POMPIERE);
            this.addAvatarOption(avatarSelect, 'ü•∑', professions.NINJA);
            this.addAvatarOption(avatarSelect, 'ü§¥', professions.PRINCIPE);
            this.addAvatarOption(avatarSelect, 'üë∏', professions.PRINCIPESSA);
        }

        // Add Fantasy & Characters section
        if (categories.FANTASY_CHARACTERS) {
            const fantasy = categories.FANTASY_CHARACTERS;
            this.addAvatarOption(avatarSelect, 'üëª', fantasy.FANTASMA);
            this.addAvatarOption(avatarSelect, 'ü§°', fantasy.PAGLIACCIO);
            this.addAvatarOption(avatarSelect, 'üëπ', fantasy.OGRE);
            this.addAvatarOption(avatarSelect, 'üë∫', fantasy.GOBLIN);
            this.addAvatarOption(avatarSelect, 'ü§ñ', fantasy.ROBOT);
            this.addAvatarOption(avatarSelect, 'üëΩ', fantasy.ALIENO);
            this.addAvatarOption(avatarSelect, 'üëæ', fantasy.MOSTRO);
            this.addAvatarOption(avatarSelect, 'üéÖ', fantasy.BABBO_NATALE);
            this.addAvatarOption(avatarSelect, 'ü§∂', fantasy.MAMMA_NATALE);
            this.addAvatarOption(avatarSelect, 'üßô‚Äç‚ôÄÔ∏è', fantasy.STREGA);
            this.addAvatarOption(avatarSelect, 'üßô‚Äç‚ôÇÔ∏è', fantasy.MAGO);
            this.addAvatarOption(avatarSelect, 'üßö‚Äç‚ôÄÔ∏è', fantasy.FATA);
            this.addAvatarOption(avatarSelect, 'üßö‚Äç‚ôÇÔ∏è', fantasy.FOLLETTO);
            this.addAvatarOption(avatarSelect, 'üßõ‚Äç‚ôÄÔ∏è', fantasy.VAMPIRA);
            this.addAvatarOption(avatarSelect, 'üßõ‚Äç‚ôÇÔ∏è', fantasy.VAMPIRO);
            this.addAvatarOption(avatarSelect, 'üßü‚Äç‚ôÄÔ∏è', fantasy.ZOMBIE);
            this.addAvatarOption(avatarSelect, 'üßü‚Äç‚ôÇÔ∏è', fantasy.ZOMBIE);
        }

        // Add Animals section
        if (categories.ANIMALS) {
            const animals = categories.ANIMALS;
            this.addAvatarOption(avatarSelect, 'üê∂', animals.CANE);
            this.addAvatarOption(avatarSelect, 'üê±', animals.GATTO);
            this.addAvatarOption(avatarSelect, 'üê≠', animals.TOPO);
            this.addAvatarOption(avatarSelect, 'üêπ', animals.CRICETO);
            this.addAvatarOption(avatarSelect, 'üê∞', animals.CONIGLIO);
            this.addAvatarOption(avatarSelect, 'ü¶ä', animals.VOLPE);
            this.addAvatarOption(avatarSelect, 'üêª', animals.ORSO);
            this.addAvatarOption(avatarSelect, 'üêº', animals.PANDA);
            this.addAvatarOption(avatarSelect, 'üê®', animals.KOALA);
            this.addAvatarOption(avatarSelect, 'üêØ', animals.TIGRE);
            this.addAvatarOption(avatarSelect, 'ü¶Å', animals.LEONE);
            this.addAvatarOption(avatarSelect, 'üêÆ', animals.MUCCA);
            this.addAvatarOption(avatarSelect, 'üê∑', animals.MAIALE);
            this.addAvatarOption(avatarSelect, 'üê∏', animals.RANA);
            this.addAvatarOption(avatarSelect, 'üêµ', animals.SCIMMIA);
            this.addAvatarOption(avatarSelect, 'üôà', animals.NON_VEDO);
            this.addAvatarOption(avatarSelect, 'üôâ', animals.NON_SENTO);
            this.addAvatarOption(avatarSelect, 'üôä', animals.NON_PARLO);
            this.addAvatarOption(avatarSelect, 'üêí', animals.SCIMMIA);
            this.addAvatarOption(avatarSelect, 'ü¶Ñ', animals.UNICORNO);
            this.addAvatarOption(avatarSelect, 'üêù', animals.APE);
            this.addAvatarOption(avatarSelect, 'üêõ', animals.BRUCO);
            this.addAvatarOption(avatarSelect, 'ü¶ã', animals.FARFALLA);
            this.addAvatarOption(avatarSelect, 'üêå', animals.LUMACA);
            this.addAvatarOption(avatarSelect, 'üêû', animals.COCCINELLA);
            this.addAvatarOption(avatarSelect, 'üêú', animals.FORMICA);
            this.addAvatarOption(avatarSelect, 'ü¶ó', animals.GRILLO);
            this.addAvatarOption(avatarSelect, 'üï∑Ô∏è', animals.RAGNO);
            this.addAvatarOption(avatarSelect, 'ü¶Ç', animals.SCORPIONE);
            this.addAvatarOption(avatarSelect, 'üê¢', animals.TARTARUGA);
            this.addAvatarOption(avatarSelect, 'üêç', animals.SERPENTE);
            this.addAvatarOption(avatarSelect, 'ü¶é', animals.LUCERTOLA);
            this.addAvatarOption(avatarSelect, 'ü¶ñ', animals.T_REX);
            this.addAvatarOption(avatarSelect, 'ü¶ï', animals.DINOSAURO);
            this.addAvatarOption(avatarSelect, 'üêô', animals.POLPO);
            this.addAvatarOption(avatarSelect, 'ü¶ë', animals.CALAMARO);
            this.addAvatarOption(avatarSelect, 'ü¶ê', animals.GAMBERO);
            this.addAvatarOption(avatarSelect, 'ü¶Ä', animals.GRANCHIO);
            this.addAvatarOption(avatarSelect, 'üê°', animals.PESCE_PALLA);
            this.addAvatarOption(avatarSelect, 'üê†', animals.PESCE);
            this.addAvatarOption(avatarSelect, 'üêü', animals.PESCE);
            this.addAvatarOption(avatarSelect, 'üê¨', animals.DELFINO);
            this.addAvatarOption(avatarSelect, 'üê≥', animals.BALENA);
            this.addAvatarOption(avatarSelect, 'ü¶à', animals.SQUALO);
            this.addAvatarOption(avatarSelect, 'üêä', animals.COCCODRILLO);
            this.addAvatarOption(avatarSelect, 'üêÖ', animals.TIGRE);
            this.addAvatarOption(avatarSelect, 'üêÜ', animals.LEOPARDO);
            this.addAvatarOption(avatarSelect, 'ü¶ì', animals.ZEBRA);
            this.addAvatarOption(avatarSelect, 'ü¶ç', animals.GORILLA);
            this.addAvatarOption(avatarSelect, 'ü¶ß', animals.ORANGUTAN);
            this.addAvatarOption(avatarSelect, 'üêò', animals.ELEFANTE);
            this.addAvatarOption(avatarSelect, 'ü¶õ', animals.IPPOPOTAMO);
            this.addAvatarOption(avatarSelect, 'ü¶è', animals.RINOCERONTE);
            this.addAvatarOption(avatarSelect, 'üê™', animals.CAMMELLO);
            this.addAvatarOption(avatarSelect, 'üê´', animals.DROMEDARIO);
            this.addAvatarOption(avatarSelect, 'ü¶í', animals.GIRAFFA);
            this.addAvatarOption(avatarSelect, 'ü¶ò', animals.CANGURO);
            this.addAvatarOption(avatarSelect, 'üêÉ', animals.BUFALO);
            this.addAvatarOption(avatarSelect, 'üêÇ', animals.TORO);
            this.addAvatarOption(avatarSelect, 'üêÑ', animals.MUCCA);
            this.addAvatarOption(avatarSelect, 'üêé', animals.CAVALLO);
            this.addAvatarOption(avatarSelect, 'üêñ', animals.MAIALE);
            this.addAvatarOption(avatarSelect, 'üêè', animals.ARIETE);
            this.addAvatarOption(avatarSelect, 'üêë', animals.PECORA);
            this.addAvatarOption(avatarSelect, 'ü¶ô', animals.LAMA);
            this.addAvatarOption(avatarSelect, 'üêê', animals.CAPRA);
            this.addAvatarOption(avatarSelect, 'ü¶å', animals.CERVO);
            this.addAvatarOption(avatarSelect, 'üêï', animals.CANE);
            this.addAvatarOption(avatarSelect, 'üê©', animals.BARBONCINO);
            this.addAvatarOption(avatarSelect, 'ü¶Æ', animals.CANE_GUIDA);
            this.addAvatarOption(avatarSelect, 'üêï‚Äçü¶∫', animals.CANE_SERVIZIO);
            this.addAvatarOption(avatarSelect, 'üêà', animals.GATTO);
            this.addAvatarOption(avatarSelect, 'üêà‚Äç‚¨õ', animals.GATTO_NERO);
            this.addAvatarOption(avatarSelect, 'üêì', animals.GALLO);
            this.addAvatarOption(avatarSelect, 'üêî', animals.GALLINA);
            this.addAvatarOption(avatarSelect, 'üê£', animals.PULCINO);
            this.addAvatarOption(avatarSelect, 'üê§', animals.PULCINO);
            this.addAvatarOption(avatarSelect, 'üê•', animals.PULCINO);
            this.addAvatarOption(avatarSelect, 'ü¶Ü', animals.ANATRA);
            this.addAvatarOption(avatarSelect, 'ü¶¢', animals.CIGNO);
            this.addAvatarOption(avatarSelect, 'ü¶Ö', animals.AQUILA);
            this.addAvatarOption(avatarSelect, 'ü¶â', animals.GUFO);
            this.addAvatarOption(avatarSelect, 'ü¶ö', animals.PAVONE);
            this.addAvatarOption(avatarSelect, 'ü¶ú', animals.PAPPAGALLO);
            this.addAvatarOption(avatarSelect, 'ü™ø', animals.OCA);
            this.addAvatarOption(avatarSelect, 'üêß', animals.PINGUINO);
            this.addAvatarOption(avatarSelect, 'üïäÔ∏è', animals.COLOMBA);
            this.addAvatarOption(avatarSelect, 'ü¶á', animals.PIPISTRELLO);
            this.addAvatarOption(avatarSelect, 'üê∫', animals.LUPO);
            this.addAvatarOption(avatarSelect, 'ü¶î', animals.RICCIO);
            this.addAvatarOption(avatarSelect, 'ü¶ù', animals.PROCIONE);
            this.addAvatarOption(avatarSelect, 'üêøÔ∏è', animals.SCOIATTOLO);
        }

        // Add Food & Drinks section
        if (categories.FOOD_DRINKS) {
            const food = categories.FOOD_DRINKS;
            this.addAvatarOption(avatarSelect, 'üçé', food.MELA);
            this.addAvatarOption(avatarSelect, 'üçä', food.ARANCIA);
            this.addAvatarOption(avatarSelect, 'üçå', food.BANANA);
            this.addAvatarOption(avatarSelect, 'üçì', food.FRAGOLA);
            this.addAvatarOption(avatarSelect, 'ü´ê', food.MIRTILLI);
            this.addAvatarOption(avatarSelect, 'üçá', food.UVA);
            this.addAvatarOption(avatarSelect, 'ü•ù', food.KIWI);
            this.addAvatarOption(avatarSelect, 'üçâ', food.ANGURIA);
            this.addAvatarOption(avatarSelect, 'üçë', food.CILIEGIE);
            this.addAvatarOption(avatarSelect, 'üçí', food.CILIEGIA);
            this.addAvatarOption(avatarSelect, 'ü•≠', food.MANGO);
            this.addAvatarOption(avatarSelect, 'üçç', food.ANANAS);
            this.addAvatarOption(avatarSelect, 'ü••', food.COCCO);
            this.addAvatarOption(avatarSelect, 'ü•ï', food.CAROTA);
            this.addAvatarOption(avatarSelect, 'üå∂Ô∏è', food.PEPERONCINO);
            this.addAvatarOption(avatarSelect, 'ü´í', food.OLIVA);
            this.addAvatarOption(avatarSelect, 'ü•ë', food.AVOCADO);
            this.addAvatarOption(avatarSelect, 'üçÜ', food.MELANZANA);
            this.addAvatarOption(avatarSelect, 'ü•î', food.PATATA);
            this.addAvatarOption(avatarSelect, 'ü•ñ', food.BAGUETTE);
            this.addAvatarOption(avatarSelect, 'ü•Ø', food.BAGEL);
            this.addAvatarOption(avatarSelect, 'üßÄ', food.FORMAGGIO);
            this.addAvatarOption(avatarSelect, 'ü•©', food.CARNE);
            this.addAvatarOption(avatarSelect, 'ü•ì', food.BACON);
            this.addAvatarOption(avatarSelect, 'üçî', food.HAMBURGER);
            this.addAvatarOption(avatarSelect, 'üçü', food.PATATINE);
            this.addAvatarOption(avatarSelect, 'üçï', food.PIZZA);
            this.addAvatarOption(avatarSelect, 'üå≠', food.HOT_DOG);
            this.addAvatarOption(avatarSelect, 'ü•™', food.SANDWICH);
            this.addAvatarOption(avatarSelect, 'üåÆ', food.TACO);
            this.addAvatarOption(avatarSelect, 'üåØ', food.BURRITO);
            this.addAvatarOption(avatarSelect, 'ü•ó', food.INSALATA);
            this.addAvatarOption(avatarSelect, 'üçú', food.RAMEN);
            this.addAvatarOption(avatarSelect, 'üçù', food.PASTA);
            this.addAvatarOption(avatarSelect, 'üç≤', food.STUFATO);
            this.addAvatarOption(avatarSelect, 'üçõ', food.CURRY);
            this.addAvatarOption(avatarSelect, 'üç£', food.SUSHI);
            this.addAvatarOption(avatarSelect, 'üç§', food.GAMBERO);
            this.addAvatarOption(avatarSelect, 'üç∞', food.TORTA);
            this.addAvatarOption(avatarSelect, 'üßÅ', food.CUPCAKE);
            this.addAvatarOption(avatarSelect, 'üç≠', food.LECCA_LECCA);
            this.addAvatarOption(avatarSelect, 'üç¨', food.CARAMELLA);
            this.addAvatarOption(avatarSelect, 'üç´', food.CIOCCOLATO);
            this.addAvatarOption(avatarSelect, 'üç©', food.DONUT);
            this.addAvatarOption(avatarSelect, 'üç™', food.BISCOTTO);
            this.addAvatarOption(avatarSelect, 'ü•õ', food.LATTE);
            this.addAvatarOption(avatarSelect, '‚òï', food.CAFFE);
            this.addAvatarOption(avatarSelect, 'üßÉ', food.SUCCO);
            this.addAvatarOption(avatarSelect, 'ü•§', food.BIBITA);
            this.addAvatarOption(avatarSelect, 'üßã', food.BUBBLE_TEA);
            this.addAvatarOption(avatarSelect, 'üç∫', food.BIRRA);
            this.addAvatarOption(avatarSelect, 'üç∑', food.VINO);
            this.addAvatarOption(avatarSelect, 'üç∏', food.COCKTAIL);
            this.addAvatarOption(avatarSelect, 'üçπ', food.DRINK);
            this.addAvatarOption(avatarSelect, 'ü•É', food.WHISKY);
        }

        // Add Objects & Symbols section
        if (categories.OBJECTS_SYMBOLS) {
            const objects = categories.OBJECTS_SYMBOLS;
            this.addAvatarOption(avatarSelect, 'üí©', objects.CACCA);
            this.addAvatarOption(avatarSelect, '‚≠ê', objects.STELLA);
            this.addAvatarOption(avatarSelect, 'üåü', objects.STELLA_BRILLANTE);
            this.addAvatarOption(avatarSelect, '‚ú®', objects.BRILLANTINI);
            this.addAvatarOption(avatarSelect, 'üí´', objects.COMETA);
            this.addAvatarOption(avatarSelect, 'üî•', objects.FUOCO);
            this.addAvatarOption(avatarSelect, '‚ö°', objects.FULMINE);
            this.addAvatarOption(avatarSelect, 'üíé', objects.DIAMANTE);
            this.addAvatarOption(avatarSelect, 'üëë', objects.CORONA);
            this.addAvatarOption(avatarSelect, 'üéØ', objects.BERSAGLIO);
            this.addAvatarOption(avatarSelect, 'üé≤', objects.DADO);
            this.addAvatarOption(avatarSelect, 'üéÆ', objects.GAMING);
            this.addAvatarOption(avatarSelect, 'üïπÔ∏è', objects.JOYSTICK);
            this.addAvatarOption(avatarSelect, 'üé≠', objects.TEATRO);
            this.addAvatarOption(avatarSelect, 'üé™', objects.CIRCO);
            this.addAvatarOption(avatarSelect, 'üé®', objects.ARTE);
            this.addAvatarOption(avatarSelect, 'üé¨', objects.CINEMA);
            this.addAvatarOption(avatarSelect, 'üé§', objects.MICROFONO);
            this.addAvatarOption(avatarSelect, 'üéß', objects.CUFFIE);
            this.addAvatarOption(avatarSelect, 'üéµ', objects.MUSICA);
            this.addAvatarOption(avatarSelect, 'üé∂', objects.NOTE);
            this.addAvatarOption(avatarSelect, 'üé∏', objects.CHITARRA);
            this.addAvatarOption(avatarSelect, 'ü•Å', objects.TAMBURO);
            this.addAvatarOption(avatarSelect, 'üé∫', objects.TROMBA);
            this.addAvatarOption(avatarSelect, 'üé∑', objects.SAX);
            this.addAvatarOption(avatarSelect, 'üöÄ', objects.RAZZO);
            this.addAvatarOption(avatarSelect, 'üõ∏', objects.UFO);
            this.addAvatarOption(avatarSelect, 'üåà', objects.ARCOBALENO);
            this.addAvatarOption(avatarSelect, 'üéà', objects.PALLONCINO);
            this.addAvatarOption(avatarSelect, 'üéâ', objects.FESTA);
            this.addAvatarOption(avatarSelect, 'üéä', objects.CORIANDOLI);
            this.addAvatarOption(avatarSelect, 'üéÅ', objects.REGALO);
            this.addAvatarOption(avatarSelect, 'üéÄ', objects.FIOCCO);
            this.addAvatarOption(avatarSelect, 'üíù', objects.DONO);
            this.addAvatarOption(avatarSelect, 'üíñ', objects.CUORE_ROSA);
            this.addAvatarOption(avatarSelect, 'üíï', objects.DUE_CUORI);
            this.addAvatarOption(avatarSelect, 'üíó', objects.CUORE_CRESCENTE);
            this.addAvatarOption(avatarSelect, 'üíì', objects.CUORE_BATTENTE);
            this.addAvatarOption(avatarSelect, 'üíò', objects.CUPIDO);
            this.addAvatarOption(avatarSelect, '‚ù§Ô∏è', objects.CUORE_ROSSO);
            this.addAvatarOption(avatarSelect, 'üß°', objects.CUORE_ARANCIONE);
            this.addAvatarOption(avatarSelect, 'üíõ', objects.CUORE_GIALLO);
            this.addAvatarOption(avatarSelect, 'üíö', objects.CUORE_VERDE);
            this.addAvatarOption(avatarSelect, 'üíô', objects.CUORE_BLU);
            this.addAvatarOption(avatarSelect, 'üíú', objects.CUORE_VIOLA);
            this.addAvatarOption(avatarSelect, 'üñ§', objects.CUORE_NERO);
            this.addAvatarOption(avatarSelect, 'ü§ç', objects.CUORE_BIANCO);
            this.addAvatarOption(avatarSelect, 'ü§é', objects.CUORE_MARRONE);
        }

        // Restore selection if it still exists
        if (currentValue && avatarSelect.querySelector(`option[value="${currentValue}"]`)) {
            avatarSelect.value = currentValue;
        } else if (avatarSelect.options.length > 0) {
            // Select first option if current value doesn't exist
            avatarSelect.value = avatarSelect.options[0].value;
        }
    }

    // Helper method to add avatar option
    addAvatarOption(select, emoji, label) {
        if (label) {
            const option = document.createElement('option');
            option.value = emoji;
            option.textContent = `${emoji} ${label}`;
            select.appendChild(option);
        }
    }

    // Method to update text for a specific element
    updateElementText(selector, text) {
        const element = document.querySelector(selector);
        if (element) {
            element.textContent = text;
        } else {
            console.warn(`‚ö†Ô∏è Element not found: ${selector}`);
        }
    }

    // Method to update text for multiple elements
    updateElementsText(selectors, text) {
        selectors.forEach(selector => {
            this.updateElementText(selector, text);
        });
    }

    // Method to update modal title dynamically
    updateModalTitle(modalId, title) {
        const modalTitle = document.querySelector(`#${modalId} .modal-title`);
        if (modalTitle) {
            modalTitle.textContent = title;
        }
    }

    // Method to update button text dynamically
    updateButtonText(buttonId, text, icon = null) {
        const button = document.querySelector(`#${buttonId}`);
        if (button) {
            if (icon) {
                button.innerHTML = `<i class="${icon}"></i>${text}`;
            } else {
                button.textContent = text;
            }
        }
    }

    // Method to update form label dynamically
    updateFormLabel(forAttribute, text) {
        const label = document.querySelector(`label[for="${forAttribute}"]`);
        if (label) {
            label.textContent = text;
        }
    }

    // Method to update dropdown option dynamically
    updateDropdownOption(selectId, value, text) {
        const option = document.querySelector(`#${selectId} option[value="${value}"]`);
        if (option) {
            option.textContent = text;
        }
    }

    // Method to get text from constants
    getText(path) {
        return path.split('.').reduce((obj, key) => obj && obj[key], CONSTANTS);
    }

    // Method to set text to an element using a constants path
    setTextFromPath(selector, path) {
        const text = this.getText(path);
        if (text) {
            this.updateElementText(selector, text);
        }
    }
}

// Create global instance
window.textManager = new TextManager(); 